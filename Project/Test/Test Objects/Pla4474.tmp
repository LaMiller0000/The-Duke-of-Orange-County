[gd_scene load_steps=6 format=3 uid="uid://ik4njgxxrgtn"]

[ext_resource type="Script" path="res://Scripts/TestSpringArm.gd" id="1"]

[sub_resource type="GDScript" id="3"]
script/source = "extends CharacterBody3D

@onready var _spring_arm: SpringArm3D = $SpringArm3D
@onready var eyes: Node3D = $Eyes
var gravity = 9.8
@export var target: Node
@export var speed: int = 20
var _velocity := Vector3.ZERO
enum state {TARGETING, FREECAM, ROLLING}
@export var STATED = state.FREECAM
var PREVSTATE = state.FREECAM
var target_position: Vector3 = Vector3(10, 0, 10)
var rolling: bool = false

func _physics_process(_delta: float) -> void:
	if rolling == true:
		var direction = global_position.direction_to(target_position)
		velocity = direction * speed
		move_and_slide()
		if global_position.distance_to(target_position) < 1.1:
			rolling = false
	else:
		match STATED:
			state.FREECAM:
				_velocity = _velocity.rotated(Vector3.UP, _spring_arm.rotation.y).normalized()
			state.TARGETING:
				if target == null:
					STATED = state.FREECAM
					print(\"broken or target deleted\")
				else:
					eyes.look_at(target.global_transform.origin, Vector3.DOWN)
					_spring_arm.rotation.y = eyes.rotation.y
					_velocity = _velocity.rotated(Vector3.UP, eyes.rotation.y).normalized()
			_:
				print(\"NOTHING\")
	_velocity.y -= gravity * _delta
	if Input.is_action_just_released(\"roll\"):
		print(\"rolled pressed\")
		print(_velocity)
		target_position = Vector3(global_position.x + (_velocity.x * 10.0), 0.0, global_position.z + (_velocity.z *10.0))
		rolling = true
	elif rolling == false:
		set_velocity(_velocity * speed)
		move_and_slide()
		_velocity.x = Input.get_action_strength(\"right\") - Input.get_action_strength(\"left\")
		_velocity.z = Input.get_action_strength(\"down\") - Input.get_action_strength(\"up\")
	_spring_arm.position = position
\"\"\"

# Variables for movement
#var target_position: Vector3 = Vector3(10, 10, 10) # Target position
#var speed: float = 5.0 # Movement speed (units per second)

func _physics_process(delta: float) -> void:
	# Calculate direction to the target
	var direction = global_position.direction_to(target_position)
	
	# Update velocity based on direction and speed
	velocity = direction * speed
	
	# Move the character
	move_and_slide()
	
	
	# Stop movement when close to the target
	if global_position.distance_to(target_position) < 1.1:
		velocity = Vector3.ZERO
		print(global_position.distance_to(target_position))
		print(\"stopped\")
	elif global_position.distance_to(target_position) > 1.1:
		print(\"moving\")
		print(global_position.distance_to(target_position))
\"\"\"
"

[sub_resource type="CapsuleShape3D" id="1"]

[sub_resource type="CapsuleMesh" id="2"]

[sub_resource type="SeparationRayShape3D" id="4"]

[node name="PlayerMovementBody" type="CharacterBody3D"]
script = SubResource("3")

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
shape = SubResource("1")

[node name="CSGMesh3D" type="CSGMesh3D" parent="CollisionShape3D"]
mesh = SubResource("2")

[node name="SpringArm3D" type="SpringArm3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 0.866026, 0.5, 0, -0.5, 0.866026, 0, 0, 5)
shape = SubResource("4")
spring_length = 12.0
margin = 0.5
script = ExtResource("1")

[node name="Camera3D" type="Camera3D" parent="SpringArm3D"]
current = true
fov = 90.0

[node name="Eyes" type="Node3D" parent="."]

[node name="Root" type="Node3D" parent="."]
transform = Transform3D(1.7, 0, 0, 0, 1.7, 0, 0, 0, 1.7, 0, 0, 0)
